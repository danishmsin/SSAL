Dataset multi Source real Target sketch Labeled num perclass 3 Network resnet34
126 classes in this dataset
Unlabelled Target Dataset Size:  23826
Labelled Target Dataset Size:  378
Misc. Labelled Target Dataset Size:  378
Bank keys - Target:  dict_keys(['feat_vec', 'labels', 'names', 'domain_identifier']) Source:  dict_keys(['feat_vec', 'labels', 'names', 'domain_identifier'])
Num  - Target:  23826 Source:  70358
Unlabeled Target Data Size: 496
S real T sketch Train Ep: 0 lr0.01 	 Loss Classification: 4.881859 Loss T 0.470421 Method MME

S real T sketch Train Ep: 100 lr0.009925650290240803 	 Loss Classification: 1.724095 Loss T 0.293266 Method MME

S real T sketch Train Ep: 200 lr0.009852577760521605 	 Loss Classification: 1.262491 Loss T 0.217132 Method MME

S real T sketch Train Ep: 300 lr0.009780748269686728 	 Loss Classification: 0.614197 Loss T 0.189780 Method MME

S real T sketch Train Ep: 400 lr0.009710128909124701 	 Loss Classification: 0.432638 Loss T 0.193384 Method MME

S real T sketch Train Ep: 500 lr0.00964068794694323 	 Loss Classification: 0.873568 Loss T 0.182733 Method MME


Labeled Target set: Average loss: 2.7545, Accuracy: 445/1080 F1 (41.2037%)


Test set: Average loss: 2.6225, Accuracy: 11029/23808 F1 (46.3248%)


Val set: Average loss: 2.5137, Accuracy: 173/360 F1 (48.0556%)

best acc test 46.324765  acc val 48.055556 acc labeled target 41.203704
saving model...
S real T sketch Train Ep: 600 lr0.00957239477517603 	 Loss Classification: 0.675681 Loss T 0.151134 Method MME

S real T sketch Train Ep: 700 lr0.009505219859830012 	 Loss Classification: 0.752134 Loss T 0.160542 Method MME

S real T sketch Train Ep: 800 lr0.009439134693595126 	 Loss Classification: 0.534750 Loss T 0.167224 Method MME

S real T sketch Train Ep: 900 lr0.009374111751051751 	 Loss Classification: 0.972048 Loss T 0.152500 Method MME

S real T sketch Train Ep: 1000 lr0.009310124446222227 	 Loss Classification: 0.709184 Loss T 0.136045 Method MME


Labeled Target set: Average loss: 2.4067, Accuracy: 539/1080 F1 (49.9074%)


Test set: Average loss: 2.3686, Accuracy: 12367/23808 F1 (51.9447%)


Val set: Average loss: 2.3081, Accuracy: 183/360 F1 (50.8333%)

best acc test 51.944724  acc val 50.833333 acc labeled target 49.907407
saving model...
S real T sketch Train Ep: 1100 lr0.00924714709232377 	 Loss Classification: 0.574785 Loss T 0.133015 Method MME

S real T sketch Train Ep: 1200 lr0.009185154863590003 	 Loss Classification: 0.695797 Loss T 0.161902 Method MME

S real T sketch Train Ep: 1300 lr0.00912412375903735 	 Loss Classification: 0.713741 Loss T 0.143285 Method MME

S real T sketch Train Ep: 1400 lr0.009064030568061049 	 Loss Classification: 0.710556 Loss T 0.118770 Method MME

S real T sketch Train Ep: 1500 lr0.009004852837753237 	 Loss Classification: 0.644811 Loss T 0.126623 Method MME


Labeled Target set: Average loss: 2.2265, Accuracy: 562/1080 F1 (52.0370%)


Test set: Average loss: 2.2716, Accuracy: 12979/23808 F1 (54.5153%)


Val set: Average loss: 2.0233, Accuracy: 209/360 F1 (58.0556%)

best acc test 54.515289  acc val 58.055556 acc labeled target 52.037037
saving model...
S real T sketch Train Ep: 1600 lr0.008946568841842816 	 Loss Classification: 1.413232 Loss T 0.157656 Method MME

S real T sketch Train Ep: 1700 lr0.008889157551163433 	 Loss Classification: 0.724673 Loss T 0.125086 Method MME

S real T sketch Train Ep: 1800 lr0.008832598605562044 	 Loss Classification: 0.618920 Loss T 0.084243 Method MME

S real T sketch Train Ep: 1900 lr0.008776872287166303 	 Loss Classification: 0.559849 Loss T 0.111953 Method MME

Per Class Accuracy Calculated According to the Labelled Target examples is:  [0.8888889  1.         0.6666667  0.33333334 0.44444445 0.
 0.5555556  0.6666667  0.44444445 0.         1.         1.
 0.6666667  0.         0.33333334 0.11111111 0.7777778  1.
 0.6666667  0.33333334 0.6666667  1.         0.5        0.44444445
 0.33333334 0.33333334 0.         0.6666667  0.5        0.16666667
 0.         0.44444445 0.6666667  0.22222222 0.5555556  0.22222222
 0.33333334 0.         1.         0.8888889  0.5        0.8888889
 0.11111111 0.7777778  0.33333334 0.44444445 0.8888889  0.6666667
 0.6666667  1.         0.44444445 0.5        1.         0.5555556
 0.22222222 0.44444445 0.7777778  1.         0.7777778  0.6666667
 1.         0.33333334 0.8888889  0.22222222 0.6666667  0.5
 0.11111111 0.6666667  0.22222222 0.44444445 0.         0.22222222
 0.16666667 0.8888889  0.8888889  0.         0.         0.44444445
 0.7777778  0.44444445 0.         0.5555556  0.22222222 1.
 0.8888889  0.33333334 0.8888889  0.6666667  0.         0.44444445
 0.33333334 0.8888889  0.6666667  0.7777778  1.         0.5555556
 0.5555556  0.6666667  0.33333334 0.         0.8333333  0.6666667
 0.6666667  0.6666667  0.6666667  0.         0.33333334 0.
 0.33333334 0.33333334 0.44444445 0.6666667  0.5555556  1.
 0.33333334 1.         0.22222222 0.6666667  0.         0.22222222
 0.5        0.6666667  0.7777778  0.         0.         1.        ]
Top k classes which perform poorly are:  [118, 107, 70, 124, 80, 105, 88, 75, 37, 30, 26, 13, 76, 9, 5, 123, 99, 66, 42, 15, 29, 72, 33, 71, 63, 82, 35, 116, 68, 54, 119, 44, 109, 114, 85, 61, 98, 106, 36, 90, 25, 24, 19, 108, 14, 3, 77, 4, 110, 69, 55, 79, 50, 89, 45, 23, 31, 8, 120, 22, 28, 40, 65, 51, 53, 6, 81, 95, 112, 34, 96, 87, 97, 104, 103, 92, 102, 101, 32, 64, 59, 2, 7, 111, 48, 47, 121, 117, 67, 27, 20, 18, 12, 122, 78, 93, 43, 56, 58, 16, 100, 0, 62, 91, 39, 41, 73, 46, 84, 86, 74, 1, 10, 11, 17, 21, 38, 83, 94, 113, 49, 52, 57, 60, 115, 125]
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
[W python_anomaly_mode.cpp:104] Warning: Error detected in MulBackward0. Traceback of forward call that caused the error:
  File "main_classwise.py", line 412, in <module>
    train()
  File "main_classwise.py", line 270, in train
    loss = torch.mean(weights_source * criterion(out1, target))
  File "/home/megh/anaconda3/envs/ssal/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/megh/projects/domain-adaptation/SSAL/utils/loss.py", line 68, in forward
    return focal_loss(F.cross_entropy(input, target, reduction='none', weight=self.weight), self.gamma)
  File "/home/megh/projects/domain-adaptation/SSAL/utils/loss.py", line 57, in focal_loss
    loss = (1 - p) ** gamma * input_values
 (function _print_stack)
/home/megh/projects/domain-adaptation/SSAL/utils/source_classwise_weighting.py:188: RuntimeWarning: divide by zero encountered in true_divide
  per_cls_weights = (1.0 - beta) / np.array(effective_num)
/home/megh/projects/domain-adaptation/SSAL/utils/source_classwise_weighting.py:189: RuntimeWarning: invalid value encountered in true_divide
  per_cls_weights = per_cls_weights / np.sum(per_cls_weights) * len(class_num_list)
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
Assigned Classwise weights to source
Predicted Number of Examples per Class is (According to the pseudo labels):  [ 23 181  36  34  57  42  69  94 104  47  88 192   2  11  69  33 166 235
  28  18  44  85  79  25  31  58  10  52  83   9  25   6  28   9  32   9
  16   9 129 100  96 183  22  36 129  84 108 256 117 263  93 136  99  62
  73 104 115  99 103 218 145  16 117  76  73  51  46 128  27 129  18  52
  90  89  59   1  19 120  94  70   1  27   1  12 151  63  79 137   0  35
 107  89 121 105 133 188  80 143   2 186 315  49 177 193 143  61  35  45
   0  42  42 148 283 226  76 255  37 308   3  92 239 248  98   4  13 197]
CBFL per class weights: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., nan, 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., nan, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.], device='cuda:0')
Traceback (most recent call last):
  File "main_classwise.py", line 412, in <module>
    train()
  File "main_classwise.py", line 294, in train
    loss.backward()
  File "/home/megh/anaconda3/envs/ssal/lib/python3.7/site-packages/torch/tensor.py", line 221, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph)
  File "/home/megh/anaconda3/envs/ssal/lib/python3.7/site-packages/torch/autograd/__init__.py", line 132, in backward
    allow_unreachable=True)  # allow_unreachable flag
RuntimeError: Function 'MulBackward0' returned nan values in its 0th output.
